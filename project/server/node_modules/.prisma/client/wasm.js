
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  nationality: 'nationality',
  languagePreference: 'languagePreference',
  ageGroup: 'ageGroup',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  descriptionEn: 'descriptionEn',
  image: 'image',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttractionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  descriptionEn: 'descriptionEn',
  image: 'image',
  location: 'location',
  price: 'price',
  openTime: 'openTime',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RestaurantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  descriptionEn: 'descriptionEn',
  image: 'image',
  location: 'location',
  priceRange: 'priceRange',
  cuisine: 'cuisine',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  descriptionEn: 'descriptionEn',
  image: 'image',
  location: 'location',
  priceRange: 'priceRange',
  stars: 'stars',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CollectionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemType: 'itemType',
  itemId: 'itemId',
  createdAt: 'createdAt'
};

exports.Prisma.TravelSurveyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  nationality: 'nationality',
  languagePreference: 'languagePreference',
  ageGroup: 'ageGroup',
  plannedCities: 'plannedCities',
  travelStartDate: 'travelStartDate',
  travelEndDate: 'travelEndDate',
  travelDays: 'travelDays',
  groupSize: 'groupSize',
  groupType: 'groupType',
  budgetRange: 'budgetRange',
  budgetAmount: 'budgetAmount',
  budgetCurrency: 'budgetCurrency',
  accommodationType: 'accommodationType',
  transportPreference: 'transportPreference',
  diningPreference: 'diningPreference',
  specialNeeds: 'specialNeeds',
  interestTags: 'interestTags',
  currentStep: 'currentStep',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsultationRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  urgency: 'urgency',
  subject: 'subject',
  message: 'message',
  attachments: 'attachments',
  preferredContactMethod: 'preferredContactMethod',
  preferredContactTime: 'preferredContactTime',
  viewedCities: 'viewedCities',
  viewedAttractions: 'viewedAttractions',
  sessionDuration: 'sessionDuration',
  status: 'status',
  responseTime: 'responseTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CallbackRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  preferredDate: 'preferredDate',
  preferredTime: 'preferredTime',
  duration: 'duration',
  languagePreference: 'languagePreference',
  consultationTopic: 'consultationTopic',
  additionalNotes: 'additionalNotes',
  status: 'status',
  confirmedAt: 'confirmedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  frequency: 'frequency',
  contentTypes: 'contentTypes',
  interests: 'interests',
  isActive: 'isActive',
  subscribedAt: 'subscribedAt',
  unsubscribedAt: 'unsubscribedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  surveyId: 'surveyId',
  consultationId: 'consultationId',
  callbackId: 'callbackId',
  email: 'email',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  qualityScore: 'qualityScore',
  infoCompleteness: 'infoCompleteness',
  needClarity: 'needClarity',
  purchaseIntent: 'purchaseIntent',
  commercialValue: 'commercialValue',
  status: 'status',
  assignedTo: 'assignedTo',
  assignedAt: 'assignedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  City: 'City',
  Attraction: 'Attraction',
  Restaurant: 'Restaurant',
  Hotel: 'Hotel',
  Collection: 'Collection',
  TravelSurvey: 'TravelSurvey',
  ConsultationRequest: 'ConsultationRequest',
  CallbackRequest: 'CallbackRequest',
  EmailSubscription: 'EmailSubscription',
  Lead: 'Lead'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
